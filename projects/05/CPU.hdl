// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // instruction
    // A: 0vvv vvvv vvvv vvvv
    // C: 111a cccc ccdd djjj
    // i=instruction[15]
    // a=instruction[12]
    // c=instruction[6..11]
    // d=instruction[3..5]
    // j=instruction[0..2]

    // if A then instruction else ALU
    Mux16(a=instruction,b=outalu,sel=instruction[15],out=outmux1);

    // if A || d1 == 1 then out = in
    Not(in=instruction[15],out=noti);
    Or(a=noti,b=instruction[5],out=loada);
    ARegister(in=outmux1,load=loada,out=outa,out[0..14]=addressM);
    
    // if a == 0 then ARegister else inM 
    Mux16(a=outa,b=inM,sel=instruction[12],out=outmux2);

    // if i == 1 && d2 == 1 then out = in
    And(a=instruction[15],b=instruction[4],out=loadd);
    DRegister(in=outalu,load=loadd,out=outd);

    ALU(x=outd,
        y=outmux2,
        zx=instruction[11],
        nx=instruction[10],
        zy=instruction[9],
        ny=instruction[8],
        f=instruction[7],
        no=instruction[6],
        out=outM,
        out=outalu,
        zr=zr,
        ng=ng); 

    // if i == 1 && d3 == 1 then writeM = 1
    And(a=instruction[15],b=instruction[3],out=writeM);

    // if reset then 0
    // else if jump then ARegister 
    // else PC++
    
    // if C && ((j1 && ALU < 0) || (j2 && ALU == 0) || (j3 && 0 < ALU)) then jump
    And(a=instruction[2],b=ng,out=outj1);
    And(a=instruction[1],b=zr,out=outj2);
    Or(a=zr,b=ng,out=aluneg);
    Not(in=aluneg,out=alupos);
    And(a=instruction[0],b=alupos,out=outj3);
    Or(a=outj1,b=outj2,out=outj12);
    Or(a=outj12,b=outj3,out=outj123);
    And(a=instruction[15],b=outj123,out=loadpc);

    PC(in=outa,load=loadpc,inc=true,reset=reset,out[0..14]=pc);
}
